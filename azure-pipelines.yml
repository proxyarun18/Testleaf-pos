trigger:
  branches:
    include:
      - main

variables:
  imageName: 'myapp'
  imageTag: '$(Build.BuildId)'
  vmServiceConnection: 'AzureVMADO' # SSH service connection to your VM
  appPort: 8080

stages:
# ---------------------------------------
# Stage 1: Build Image & Deploy on VM
# ---------------------------------------
  - stage: Build_Deploy
    displayName: Build, Deploy and Run SonarQube Analysis
    jobs:
      - job: BuildDeployJob
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self

          # Enable BuildKit permanently on VM
          - task: SSH@0
            displayName: Enable BuildKit on VM
            inputs:
              sshEndpoint: $(vmServiceConnection)
              runOptions: inline
              inline: |
                echo "Enabling Docker BuildKit permanently..."
                echo '{"features":{"buildkit":true}}' | sudo tee /etc/docker/daemon.json
                sudo systemctl restart docker

          # Prepare folder on VM
          - task: SSH@0
            displayName: Prepare app folder on VM
            inputs:
              sshEndpoint: $(vmServiceConnection)
              runOptions: inline
              inline: |
                mkdir -p ~/app

          # Copy source code to VM
          - task: CopyFilesOverSSH@0
            displayName: Copy Source Code to VM
            inputs:
              sshEndpoint: $(vmServiceConnection)
              sourceFolder: '$(Build.SourcesDirectory)'
              contents: '**'
              targetFolder: '~/app'

          # Build & Run Docker container
          - task: SSH@0
            displayName: Build and Run Docker Container on VM
            inputs:
              sshEndpoint: $(vmServiceConnection)
              runOptions: inline
              inline: |
                cd ~/app
                echo "Stopping old container (if exists)..."
                docker rm -f myapp-container || true
                echo "Removing dangling images..."
                docker image prune -f
                echo "Building Docker image..."
                docker build -t $(imageName):$(imageTag) .
                echo "Starting new container..."
                docker run -d --name myapp-container -p $(appPort):$(appPort) $(imageName):$(imageTag)
                echo "Checking app health..."
                sleep 10
                curl -f http://localhost:$(appPort) || exit 1

# ---------------------------------------
# Stage 2: SonarQube Static Code Analysis
# ---------------------------------------
  - stage: Static_Check
    displayName: SonarQube Static Code Analysis via Maven
    dependsOn: Build_Deploy
    jobs:
      - job: SonarAnalysis
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self
          
          - script: |
              mvn clean verify sonar:sonar \
                -Dsonar.projectKey=SonarQubeArun \
                -Dsonar.projectName='SonarQubeArun' \
                -Dsonar.host.url=http://98.70.57.201:9000 \
                -Dsonar.token=sqp_0a4b770d57dda6e9259c353925571263a6a155c1
            displayName: Run Maven SonarQube Scan
